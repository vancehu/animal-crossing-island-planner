import React, { useEffect, useRef } from 'react';
import { extend, ReactThreeFiber, useFrame, useThree } from 'react-three-fiber';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';
import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';
import { GlitchPass } from 'three/examples/jsm/postprocessing/GlitchPass';

const CurvatureShader = {
  uniforms: {
    tDiffuse: { value: null },
    curve: { value: 0.005 }
  },

  vertexShader: `
    mat4 inverse(mat4 m) {
      float
          a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],
          a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],
          a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],
          a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],

          b00 = a00 * a11 - a01 * a10,
          b01 = a00 * a12 - a02 * a10,
          b02 = a00 * a13 - a03 * a10,
          b03 = a01 * a12 - a02 * a11,
          b04 = a01 * a13 - a03 * a11,
          b05 = a02 * a13 - a03 * a12,
          b06 = a20 * a31 - a21 * a30,
          b07 = a20 * a32 - a22 * a30,
          b08 = a20 * a33 - a23 * a30,
          b09 = a21 * a32 - a22 * a31,
          b10 = a21 * a33 - a23 * a31,
          b11 = a22 * a33 - a23 * a32,

          det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

      return mat4(
          a11 * b11 - a12 * b10 + a13 * b09,
          a02 * b10 - a01 * b11 - a03 * b09,
          a31 * b05 - a32 * b04 + a33 * b03,
          a22 * b04 - a21 * b05 - a23 * b03,
          a12 * b08 - a10 * b11 - a13 * b07,
          a00 * b11 - a02 * b08 + a03 * b07,
          a32 * b02 - a30 * b05 - a33 * b01,
          a20 * b05 - a22 * b02 + a23 * b01,
          a10 * b10 - a11 * b08 + a13 * b06,
          a01 * b08 - a00 * b10 - a03 * b06,
          a30 * b04 - a31 * b02 + a33 * b00,
          a21 * b02 - a20 * b04 - a23 * b00,
          a11 * b07 - a10 * b09 - a12 * b06,
          a00 * b09 - a01 * b07 + a02 * b06,
          a31 * b01 - a30 * b03 - a32 * b00,
          a20 * b03 - a21 * b01 + a22 * b00) / det;
    }
    uniform float curve;
    varying vec2 vUv;

    void main() {
      vUv = uv;
      vec4 v = vec4(position, 1.0);
      
      // Transform the vertex coordinates from model space into world space
      vec4 vv = viewMatrix * modelMatrix * v;
      
      // // Now adjust the coordinates to be relative to the camera position
      // vv.xyz -= cameraPosition.xyz;
      
       
      // // Reduce the y coordinate (i.e. lower the "height") of each vertex based
      // // on the square of the distance from the camera in the z axis, multiplied
      // // by the chosen curvature factor
      // vv = vec4(0.0, (vv.z * vv.z) * - curve, 0.0, 0.0);
 
      
      // // Now apply the offset back to the vertices in model space
      // v += inverse(modelMatrix) * vv;   


      vv.y += vv.z;
      
      vec4 pos = projectionMatrix * vv;

      pos.y += pos.z;

      gl_Position = pos;
    }
  `,
  fragmentShader: `
    varying vec2 vUv;
    uniform sampler2D tDiffuse;
    void main() {
      // passthrough
      vec4 previousPassColor = texture2D(tDiffuse, vUv);
      gl_FragColor = previousPassColor.rgba;
    }
  `
};

extend({ EffectComposer, RenderPass, ShaderPass, GlitchPass })
declare global {
  namespace JSX {
    interface IntrinsicElements {
      effectComposer: ReactThreeFiber.Object3DNode<EffectComposer, typeof EffectComposer>;
      renderPass: ReactThreeFiber.Object3DNode<RenderPass, typeof RenderPass>;
      shaderPass: ReactThreeFiber.Object3DNode<ShaderPass, typeof ShaderPass>;
      glitchPass: ReactThreeFiber.Object3DNode<GlitchPass, typeof GlitchPass>;
    }
  }
}
export function CurvatureEffect() {
  const { gl, scene, camera, size } = useThree()
  const composer = useRef<EffectComposer>()
  useEffect(() => {
    composer.current?.setSize(size.width, size.height);
  }, [size])

  useFrame(() => composer.current?.render(), 1)
  return (
    <effectComposer ref={composer} args={[gl]}>
      <renderPass attachArray="passes" args={[scene, camera]} />
      <shaderPass attachArray="passes" renderToScreen args={[CurvatureShader]} />
    </effectComposer>
  )
}
